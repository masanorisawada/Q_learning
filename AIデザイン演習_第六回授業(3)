{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3",
   "language": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import namedtuple\n",
    "import torch\n",
    "from torch import nn\n",
    "from torch import optim\n",
    "import torch.nn.functional as F"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from JSAnimation.IPython_display import display_animation\n",
    "from matplotlib import animation\n",
    "from IPython.display import display\n",
    "\n",
    "def save_as_gif(frames):\n",
    "    plt.figure(figsize=(frames[0].shape[1]/72.0, frames[0].shape[0]/72.0), dpi=72)\n",
    "    patch = plt.imshow(frames[0])\n",
    "    plt.axis('off')\n",
    "    \n",
    "    def animate(i):\n",
    "        patch.set_data(frames[i])\n",
    "        \n",
    "    anim = animation.FuncAnimation(plt.gcf(), animate, frames=len(frames), interval=50)\n",
    "    anim.save('DQN-cartpole-demo.mp4')\n",
    "    display(display_animation(anim, default_mode='loop'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Car(name='フェアリディZ', color='白')\nフェアリディZ\n"
     ]
    }
   ],
   "source": [
    "# Car = namedtuple('Car', 'name color',)\n",
    "# Car_object = Car('フェアリディZ' , '白')\n",
    "\n",
    "# print(Car_object)\n",
    "# print(Car_object.name)\n",
    "\n",
    "Transition = namedtuple('Transition' , 'state action next_state reward')\n",
    "\n",
    "#学習に使う変数の整理\n",
    "ENV = 'CartPole-v0'\n",
    "#報酬割引率\n",
    "GAMMA = 0.99\n",
    "#1試行(1エピソード)の最大ステップ数\n",
    "MAX_STEP = 200\n",
    "#最大試行回数（エピソード数）\n",
    "NUM_EPISODES = 1000\n",
    "#バッチサイズ\n",
    "BATCH_SIZE = 32\n",
    "#キャパシティ\n",
    "CAPACITY = 10000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ミニバッチ学習のための経験データを保存するクラス\n",
    "class ReplayMemory:\n",
    "\n",
    "    def __init__(self, CAPACITY):\n",
    "        #メモリ容量\n",
    "        self.capacity = CAPACITY\n",
    "        #経験を保存する\n",
    "        self.memory = []\n",
    "        #保存場所示す変数\n",
    "        self.index = 0\n",
    "\n",
    "    def push(self, state, action, next_state, reward):\n",
    "        \n",
    "        #メモリの長さが指定したキャパシティ以下の場合にNoneを追加しておく\n",
    "        if len(self.memory) < self.capacity:\n",
    "            self.memory.append(None)\n",
    "\n",
    "        #経験をメモリに保存\n",
    "        self.memory[self.index] = Transition(state, action, next_state, reward)\n",
    "\n",
    "        #インデックスを１ずらす\n",
    "        self.index = (self.index + 1) % self.capacity\n",
    "\n",
    "    #指定したバッチサイズ分、ランダムに経験を取り出す\n",
    "    def sample(self, batch_size):\n",
    "        return random.sample(self.memory, batch_size)\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.memory)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#エージェントが行う行動を与えられた状態によって判断する部分（深層学習（DQN）を行う部分）\n",
    "class Brain:\n",
    "\n",
    "    def __init__(self, num_states, num_actions):\n",
    "        self.num_actions = num_actions\n",
    "        self.memory = ReplayMemory(CAPACITY)\n",
    "\n",
    "        #ニューラルネットワーク\n",
    "        self.model = nn.Sequention()\n",
    "        self.model.add_module('fc1',nn.Linear(num_states, 32))\n",
    "        self.model.add_module ('relu1', nn.ReLU())\n",
    "        self.model.add_module('fc1',nn.Linear(32, 32))\n",
    "        self.model.add_module ('relu1', nn.ReLU())\n",
    "        self.model.add_module(nn.Linear(32, num_actions))\n",
    "\n",
    "        #最適化手段\n",
    "        self.optimizer = optim.Adam(self.model.parameters(),lr=0.0001)\n",
    "\n",
    "    def replay(self):\n",
    "        #最初にメモリサイズを確認する\n",
    "        #指定したバッチサイズより小さい場合は何もしない\n",
    "        if len(slef.memory) < BATCH_SIZE:\n",
    "            return\n",
    "\n",
    "        #ミニバッチ用のデータを取得(ランダム)\n",
    "        transitions = self.memory.sample(BATCH_SIZE)\n",
    "        #transitionsは（state, action, next_state, reward）* BATCH_SIZE\n",
    "\n",
    "        batch = Transition(*zip(*transitions))\n",
    "        \n",
    "        action_batch = torch.cat(batch.action)\n",
    "        state_batch = torch.cat(batch.state)\n",
    "        reward_batch = torch.cat(batch.reward)\n",
    "        non_final_next_states = torch.cat([s for s in batch.next_states if s is not None])\n",
    "\n",
    "        #教師信号となるQ(s_t, a_t)を求める\n",
    "        self.model.eval()\n",
    "\n",
    "        #self.model(state_batch)は、二つのQ値を出力する\n",
    "        #[torch.FloatTensor of size BATCH_SIZE * 2]になっているので\n",
    "        #実行したアクション(a_t)に対応するQ値をaction_batchで行った行動a_tのindexを使って習得する\n",
    "        state_action_values = self.model(state_batch).gather(1, action_batch)\n",
    "\n",
    "        #carrtpoleがdoneになっていない、かつ、next_stateがあるかどうかをチェックするためのマスクを作成する\n",
    "        non_final_mask = torch.ByteTensor(tuple(map(lambda s: s is not None, batch_state)))\n",
    "\n",
    "        #maxQ(s_t+1 , a)を求める\n",
    "        next_state_values = torch.zeros(BATCH_SIZE)\n",
    "\n",
    "        #次の状態があるindexの最大値Qを求める\n",
    "        next_state_values[non_final_mask] = self.model(non_final_next_states).max(1)[0].detach()\n",
    "\n",
    "\n",
    "        #Q学習の行動価値関数更新式からQ(s_t, a_t)を求める\n",
    "        expected_state_action_values = reward_batch + GAMMA * next_state_values\n",
    "\n",
    "\n",
    "        #モデルを訓練モードの切替\n",
    "        self.model.train()\n",
    "\n",
    "        #二乗誤差の代わりにHuuber関数を用いる\n",
    "        loss = F.smooth_l1_loss(state_action_values, expected_state_action_values.unsqueeze(1))\n",
    "\n",
    "        #勾配をリセット\n",
    "        self.optimizer.zero_grad()\n",
    "\n",
    "        #誤差逆伝播\n",
    "        loss.backward()\n",
    "        #ニューラルネットワークの重み更新\n",
    "        self.optimizer.step()\n",
    "\n",
    "    #現在の状態に応じて鼓動を決定する\n",
    "    def decide_action(self, state, epsisode):\n",
    "        #ε-greedt法で徐々に最適行動を採用するようにする\n",
    "        epsilon = 0.5 * (1/(epsisode + 1))\n",
    "\n",
    "        if epsilon <= np.random.uniform(0,1):\n",
    "\n",
    "            #推論モードに\n",
    "            self.model.eval()\n",
    "            #ネットワークの出力の最大値のindexを取得\n",
    "            #view関数で行列サイズを(1 ,1)に調整\n",
    "            with torch.no_grad():\n",
    "                action = self.model(state).max(1)[1].view(1, 1)\n",
    "\n",
    "        else:\n",
    "            #右左ランダムに行動する\n",
    "            #actionは[torch.LongTensor of size 1 * 1]\n",
    "            action = torch.LongTensor([[random.randrange(self.num_actions)]])\n",
    "\n",
    "        return action"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#エージェントクラス\n",
    "class Agent:\n",
    "    def __init__(self, num_states, num_actions):\n",
    "        #Brainクラスをインスタンス化\n",
    "        self.brain = Brain(num_states, num_actions)\n",
    "\n",
    "    def update_q_function (self):\n",
    "        self.brain.replay()\n",
    "\n",
    "    def get_action(self, state, episode):\n",
    "        action = self.brain.decide_action(state, episode)\n",
    "        return action\n",
    "    \n",
    "    def memorize(self,state, action, next_state, reward):\n",
    "        self.brain.memory.push(state, action, next_state, reward)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cartpoleを実行する環境クラス\n",
    "class Enviroment:\n",
    "\n",
    "    def __init__(self):\n",
    "        self.env = gym.make(ENV)\n",
    "        num_states = self.env.observation_space.shape[0]\n",
    "        num_action = self.env.action_space.n\n",
    "        "
   ]
  }
 ]
}